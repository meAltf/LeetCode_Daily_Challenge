QUE-NO- 93

/*

A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

 

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]
Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]
Example 3:

Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0

*/

class Solution {
    public static List<String> restoreIpAddresses(String s) {
        // Initialize the list to hold all valid IP addresses
        List<String> addresses = new ArrayList<>();
        // Initialize the list to hold the current IP address being built
        List<String> address = new ArrayList<>();
        // Call the recursive helper function to generate all possible IP addresses
        rec(s, 0, address, addresses);
        // Return the list of all valid IP addresses
        return addresses;
    }
    private static void rec(String s, int i, List<String> address, List<String> addresses) {
        // If the current address has 4 segments, check if we have reached the end of the input string
        if (address.size() == 4) {
            if (i == s.length()) {
                // If we have reached the end of the input string, add the current address to the list of valid addresses
                addresses.add(String.join(".", address));
            }
        } else {
            // Try all possible next segments for the current address
            for (int j = i + 1; j <= i + 3 && j <= s.length(); j++) {
                String nextInt = s.substring(i, j);
                // Check if the next segment is valid (between 0 and 255, and not starting with 0 unless it is 0)
                if (Integer.parseInt(nextInt) <= 255 && (nextInt.equals("0") || !nextInt.startsWith("0"))) {
                    // Add the next segment to the current address
                    address.add(nextInt);
                    // Recursively call the function to generate the next segment
                    rec(s, j, address, addresses);
                    // Remove the last segment from the current address
                    address.remove(address.size() - 1);
                }
            }
        }
    }
}

